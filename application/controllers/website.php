<?php

class Website_Controller extends Template_Controller {
    /**
     * @var View_Core
     */
    public $template = '../template/template';

    /**
    @var Session_Core
    */
    public $session;

    /**
     * @var Authlite_Core
     */
    public $auth = '';
    public $user;
    public $loggedIn;    

    /**
     * @return Website_Controller
     */
    public function __construct()
    {
        parent::__construct();
        $this->template->title = 'MXTP.me | ';
        $this->template->content = '';
        $this->template->jsFiles = array();
        $this->template->cssFiles = array();

        // Sessions
        $this->session  = Session::instance();
        $this->redirect = $this->session->get('redirect', '/');
        $this->session->set('redirect', '/' . url::current());

        // Auth
        $this->auth = new Authlite();
        $this->user = $this->auth->get_user();
        $this->loggedIn = $this->auth->logged_in();
        $this->template->loggedIn = $this->loggedIn;
    }

    /**
     *
     * @param $method
     * @param $arguments
     * @return unknown_type
     */
    public function __call($method, $arguments)
    {
        // Disable auto-rendering
        $this->auto_render = false;

        // By defining a __call method, all pages routed to this controller
        // that result in 404 errors will be handled by this method, instead of
        // being displayed as "Page Not Found" errors.
        echo 'This text is generated by __call. If you expected the index page, you need to use: welcome/index/'.substr(Router::$current_uri, 8);
    }

    /**
     *
     * @param $jsonArr
     * @return unknown_type
     */
    public function renderJson($isSuccess = false, Array $options = null)
    {
        // Output results
        $this->auto_render = false;
        $options = ($options ? $options : array());
        $jsonArr = array_merge(array('success' => (bool) $isSuccess), $options);
        $json    = json_encode($jsonArr);

        header('content-type: application/json');
        die($json);
    }

    public function requireLogin()
    {
        if (!$this->loggedIn) {
            url::redirect('/login');
        }
        
        return $this->user->id;
    }
    
    public function requireAjax($requireLogin = true)
    {
        // If not AJAX, leave the page
        if (!request::is_ajax()) {
            url::redirect('/');
        }
        
        // If login is required get user or prompt
        if ($requireLogin) {
            // If not logged in, inform user through json
            if (!$this->loggedIn) {
                $this->renderJson(false, array('login' => true));    
            }
            
            return $this->user->id;
        }
        
        return true;
    }
}